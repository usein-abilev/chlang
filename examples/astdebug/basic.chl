fn sum (a: i32, b: i32) -> i32 {
    fn sum2 (a2: i32) {
        return a + a2
    }
    return a + sum2(b);
}

let a = 2 * 3;
let b = sum(1, 2) + 3; // 6

// sum:
// POP r0
// POP r1
// Add r0, r0(a), r1(b)
// Ret

// main:
//          let a = 2 * 3;
// LoadInt4 r0, 2 
// LoadInt4 r1, 3
// Mul r0, r0, r1 ; r0 = (a)

x = sum(f(2, 3), 4)
// PUSH 2
// PUSH 3
// CALL f, 2, r0
// push r0
// push 4
// call sum, r0


sum: 
    popStack R0 // second argument 
    popStack R1 // first argument
    // R0 // ARGUMENT
    // R1 // ARGUMENT

// let a = 2 * 3;
// (Mul) (LoadInt)
// LoadInt r0, 2
// LoadInt 4r


// sum: 
//      Add r0, r0, r1 // r0 = r0 + r1
//      Mov r1, r0 // r1 = r0
//      Ret

/*
fn fib (n: i32) -> i32 {
    if n <= 1 {
        return n;
    } else {
        return fib(n - 1) + fib(n - 2);
    }
}

/*
if 2 == "test" {

}

// cannot add `string` to `{integer}`
// cannot add `{integer}` to `string`

// let a = 10 + "test";
//            ^ no implementation for `{integer} + &str`

// let a = "test" + 1;
//            ^ no implementation for `{integer} + &str`

// If variable has no type specified, then i32 is assumed and type checks will be based on this type 
// let default_i32 = 65888888800 + 500;

/*
// let func_not_exists: i32 = some_noe_function(1, 3,51, 234)
{
    let a = 10;
    {
        // use above value
        let a = 20;
        // use a as 20.
    }
}

// a = b = 2 ** 3 + 2; // a = (b = ((2 ** 3) + 2))
/*
let a;
let b =
let a = 10;
/*
let bc = 1 + 2 fn e

fn test () -> i32 {
    let a = 10 +
}

fn let = 10;

let a = 50;
let b = 30;
let c = 501;
                /*
// Even more compact (but less readable)
let max = if (a > b) {10} else {0}
let max = if a > b if a > 0 a else 0 else b;

fn test_ifs (a: i32, b: i32) -> i32 {
    let a = 10
    let b = 20
    let c = 30

    a a b; // should be an error

    return
    1000500
    1000500 + 1

    return (
        1 + 3 + 4
    );

    1;
    
    // let a = let b = 45;
    let max = a + 2 + 3 * 4
    if (a < b) max = b

    // With else
    if a > b {
        max = a
    } else {
        max = b
    }

    // As expression
    max = if (a > b) a else b
    max = if a > b a else b 
    
    // Even more compact (but less readable)
    max = if a > b if a > 0 a else 0 else b
    // Is equivalent to
    max = if a > b {
        if a > 0 {
            a
        } else {
            0
        }
    } else {
        b
    }
    // or
    if a > b { 
        if a > 0 { 
            max = a
        } else { 
            max = 0
        }
    } else { 
        max = b
    }
    

    // You can also use `else if` in expressions:
    let maxLimit = 1
    let maxOrLimit = if (maxLimit > a) maxLimit else if (a > b) a else b
}

/*
fn correct_syntax (a: i32, b: i32, c: i32) -> i32 { // all syntax is correct
    a
    b + 
    3;
    bcd 
    asdf 
    bc 
    0dfsd 
    asdfasd 
    s
    return 2 + 3 +
    104015 // eol is separator between stmt expressions
    +2
    535032
    23
    +1
    -2
    23 + 
    2 // that will be 25 (23 + 2), because plus on same line
}
/*
fn main() {
    let a = 10
    let b = 20 + func(1, 2, 3, 4)
    ;;;;
    b = a = 2
    + 2;

    let c = 1 + 2 +
    (1 + 1) // c=5
    
    let d = 1 + 2 
    +(2 + 3) // c=3

    // a a b; // should be an error

    let result = test()
}

// if statement vs if expression
fn fibonacci(n: i32) -> i32 {
    // let a = 10
    // +
    // 3; -5; // should be work as 10 + 3; and -5 as an expr statement;

    // 1
    // 2
    // 3
    // 4
    // 5
    // 6
    // 7
    let a = if n <= 1 {
        let b = 10;
        n
    } else if n == 2 { 
        1
    } else { 
        fibonacci(n - 1) + fibonacci(n - 2)
    }

    if (n <= 1 ) return n else if n == 2 return 1 else 
    return fibonacci(n - 1) + fibonacci(n - 2);
}
/*
fn test_expression() {
    let a = 1 + 2 * 3; // 7
    let b = (1 + 2) * 3; // 9
    let c = 1 + 2 * 3 / 4; // 2
    let d = 1 + 2 * 3 % 4; // 3
    let e = 1 + 2 * 3 == 7; // true
    let f = 1 + 2 * 3 != 7; // false
    let g = 1 + 2 * 3 < 7; // true
    let h = 1 + 2 * 3 <= 7; // true
    let i = 1 + 2 * 3 > 7; // false
    let j = 1 + 2 * 3 >= 7; // false
    let k = 1 + 2 * 3 && 1 + 2 * 3; // true
    let l = 1 + 2 * 3 || 1 + 2 * 3; // true
    let m = !1 + 2 * 3; // -6
    let n = 1 + 2 * 3; // 7

    if a == 2 return
    if a == 2 {
        return
    } else return 2;

    if a === 1 {
        return
    }

    let a = 10;

    let ife = if 1 + 2 * 3 == 7 { 
        2 ** 3
    } else { 
        3 ** 2 + 1
    };

    return if ife == true 1 else 0;
}
/*
fn fibonacci_iterative(n: i32) -> i32 {
    let a = 0
    let b = 1;
    for i in 0..n { // can be simplify to "for i in 0..n"
        let temp = a;
        a = b;
        b = temp + b;
    }
    return a;
}

fn check_two_numbers (a: i32, b: i32) -> i32 {
    if a > b { 
        log.printf("a is greater than b");
    } else if a < b {
        log.printf("a is less than b");
    } else {
        log.printf("a is equal to b");
    }
}

// The main function is the entry point of the program
fn main () {
    const a = 18;
    const b = 1 + 2 * 3; // 7
    const result = check_two_numbers(a, b);
    log.printf("The result is %i", result);
}